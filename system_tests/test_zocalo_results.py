import asyncio

import bluesky.plan_stubs as bps
import psutil
import pytest
from bluesky.preprocessors import stage_decorator
from bluesky.protocols import Reading
from bluesky.run_engine import RunEngine
from bluesky.utils import FailedStatus

import dodal.devices.zocalo.zocalo_results
from dodal.devices.zocalo import (
    NoZocaloSubscription,
    XrcResult,
    ZocaloResults,
    ZocaloStartInfo,
    ZocaloTrigger,
)
from dodal.devices.zocalo.zocalo_constants import ZOCALO_ENV

TEST_RESULT_LARGE: XrcResult = {
    "centre_of_mass": [1, 2, 3],
    "max_voxel": [1, 2, 3],
    "max_count": 105062,
    "n_voxels": 35,
    "total_count": 2387574,
    "bounding_box": [[2, 2, 2], [8, 8, 7]],
}

DCID_WHICH_EXISTS_IN_DEV_ISPYB = 1000


@pytest.fixture
async def zocalo_device():
    zd = ZocaloResults()
    await zd.connect()
    return zd


def convert_zocalo_device_reading_to_xrc_result(
    zocalo_reading: dict[str, Reading],
) -> XrcResult:
    com = zocalo_reading["zocalo-centre_of_mass"]["value"][0]
    max_voxel = zocalo_reading["zocalo-max_voxel"]["value"][0]
    max_count = zocalo_reading["zocalo-max_count"]["value"][0]
    n_voxels = zocalo_reading["zocalo-n_voxels"]["value"][0]
    total_count = zocalo_reading["zocalo-total_count"]["value"][0]
    bounding_box = zocalo_reading["zocalo-bounding_box"]["value"][0]

    return XrcResult(
        centre_of_mass=com.tolist(),
        max_voxel=max_voxel.tolist(),
        max_count=int(max_count),
        n_voxels=int(n_voxels),
        total_count=int(total_count),
        bounding_box=bounding_box.tolist(),
    )


@pytest.mark.s03
async def test_read_results_from_fake_zocalo(
    zocalo_device: ZocaloResults, RE: RunEngine
):
    zocalo_device._subscribe_to_results()
    zc = ZocaloTrigger(ZOCALO_ENV)
    zc.run_start(ZocaloStartInfo(DCID_WHICH_EXISTS_IN_DEV_ISPYB, None, 0, 100, 0))
    zc.run_end(DCID_WHICH_EXISTS_IN_DEV_ISPYB)
    zocalo_device.timeout_s = 15

    def plan():
        yield from bps.open_run()
        yield from bps.trigger_and_read([zocalo_device])
        yield from bps.close_run()

    RE(plan())

    results = await zocalo_device.read()
    assert convert_zocalo_device_reading_to_xrc_result(results) == TEST_RESULT_LARGE


@pytest.mark.s03
async def test_stage_unstage_controls_read_results_from_fake_zocalo(
    zocalo_device: ZocaloResults, RE: RunEngine
):
    dodal.devices.zocalo.zocalo_results.CLEAR_QUEUE_WAIT_S = 0.05
    zc = ZocaloTrigger(ZOCALO_ENV)
    zocalo_device.timeout_s = 15

    def plan():
        yield from bps.open_run()
        zc.run_start(ZocaloStartInfo(DCID_WHICH_EXISTS_IN_DEV_ISPYB, None, 0, 100, 0))
        zc.run_end(DCID_WHICH_EXISTS_IN_DEV_ISPYB)
        yield from bps.sleep(0.15)
        yield from bps.trigger_and_read([zocalo_device])
        yield from bps.close_run()

    @stage_decorator([zocalo_device])
    def plan_with_stage():
        yield from plan()

    # With stage, the plan should run normally
    RE(plan_with_stage())
    # Without stage, the plan should run fail because we didn't connect to Zocalo
    with pytest.raises(FailedStatus) as e:
        RE(plan())
    assert isinstance(e.value.__cause__, NoZocaloSubscription)
    # And the results generated by triggering in plan() shouldn't make it to the zocalo device
    assert zocalo_device._raw_results_received.empty()

    # But we triggered it, so the results should be in the RMQ queue
    zocalo_device._subscribe_to_results()
    await asyncio.sleep(1)

    results = await zocalo_device.read()
    assert convert_zocalo_device_reading_to_xrc_result(results) == TEST_RESULT_LARGE
    await zocalo_device.unstage()

    # Generating some more results leaves them at RMQ
    with pytest.raises(FailedStatus) as e:
        RE(plan())
    # But waiting for stage should clear them
    RE(bps.stage(zocalo_device, wait=True))
    assert zocalo_device._raw_results_received.empty()


@pytest.mark.s03
async def test_stale_connections_closed_after_unstage(
    zocalo_device: ZocaloResults, RE: RunEngine
):
    connections_before = len(psutil.net_connections())

    def stage_unstage():
        yield from bps.stage(zocalo_device)
        yield from bps.unstage(zocalo_device)

    RE(stage_unstage())

    connections_after = len(psutil.net_connections())

    assert connections_before == connections_after
