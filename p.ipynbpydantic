{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ef076421-53cc-4a5a-abd2-3133af676e78",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pydantic import BaseModel, ConfigDict\n",
    "from dodal.devices.i10.id_apple2 import convert_csv_to_lookup\n",
    "import numpy as np\n",
    "lut= convert_csv_to_lookup(file=\"/workspaces/dodal/tests/devices/i10/lookupTables/IDEnergy2GapCalibrations.csv\", source=(\"Source\",\"idu\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4df22e82-6817-470d-80da-dc7e8c356bd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "class lookuptable(BaseModel):\n",
    "    Value: str\n",
    "    Type: str"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e56e0e6-80e0-4cb7-be99-788f60dac9e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class lookuptable(BaseModel):\n",
    "    model: str\n",
    "\n",
    "\n",
    "class ConfStructure(BaseModel):\n",
    "    version: int\n",
    "    info: Info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6b856eb-4597-4d4c-928c-82e2a3c85032",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_conf_wrong = {\n",
    "    'version': 1,\n",
    "\n",
    "    'info': {\n",
    "        'conf_one': 2.5,\n",
    "        'conf_two': 'foo',\n",
    "        'conf_three': False,\n",
    "        'optional_conf': 'bar'\n",
    "    }\n",
    "}\n",
    "\n",
    "my_conf_right = {\n",
    "    'version': 10,\n",
    "\n",
    "    'info': {\n",
    "        'conf_one': 14.5,\n",
    "        'conf_two': 'something',\n",
    "        'conf_three': False\n",
    "    }\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6694cd4a-22e3-4f5b-a363-616c1758beeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = ConfStructure(**my_conf_right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60cc1988-281b-4971-8d6f-08358bb4e879",
   "metadata": {},
   "outputs": [],
   "source": [
    "res = ConfStructure(**my_conf_wrong)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d669082-693a-40bb-82a4-e918fcb5221c",
   "metadata": {},
   "outputs": [],
   "source": [
    "'Low': 255.3,\n",
    "    'High': 513.28,\n",
    "    'Poly': poly1d([ 4.33435e-08, -7.52562e-05,  6.41791e-02,  3.88755e+00])},"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b4ca9b09-7e63-4283-b434-99bddd74ae63",
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "no validator found for <class 'numpy.poly1d'>, see `arbitrary_types_allowed` in Config",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[8], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpydantic\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m BaseModel, ConfigDict, ValidationError\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;43;01mclass\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;21;43;01menergies\u001b[39;49;00m\u001b[43m(\u001b[49m\u001b[43mBaseModel\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmodel_config\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mConfigDict\u001b[49m\u001b[43m(\u001b[49m\u001b[43marbitrary_types_allowed\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m    \u001b[49m\u001b[43mLow\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mfloat\u001b[39;49m\n",
      "File \u001b[0;32m/venv/lib/python3.11/site-packages/pydantic/main.py:197\u001b[0m, in \u001b[0;36mpydantic.main.ModelMetaclass.__new__\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m/venv/lib/python3.11/site-packages/pydantic/fields.py:504\u001b[0m, in \u001b[0;36mpydantic.fields.ModelField.infer\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m/venv/lib/python3.11/site-packages/pydantic/fields.py:434\u001b[0m, in \u001b[0;36mpydantic.fields.ModelField.__init__\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m/venv/lib/python3.11/site-packages/pydantic/fields.py:555\u001b[0m, in \u001b[0;36mpydantic.fields.ModelField.prepare\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m/venv/lib/python3.11/site-packages/pydantic/fields.py:829\u001b[0m, in \u001b[0;36mpydantic.fields.ModelField.populate_validators\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m/venv/lib/python3.11/site-packages/pydantic/validators.py:765\u001b[0m, in \u001b[0;36mfind_validators\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mRuntimeError\u001b[0m: no validator found for <class 'numpy.poly1d'>, see `arbitrary_types_allowed` in Config"
     ]
    }
   ],
   "source": [
    "from pydantic import BaseModel, ConfigDict, ValidationError\n",
    "class energies(BaseModel):\n",
    "    model_config = ConfigDict(arbitrary_types_allowed=True)\n",
    "    Low: float\n",
    "    High: float\n",
    "    Poly: np.poly1d\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfb3148b-b695-4c96-b2bf-abb551c3bf27",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47abe376-478e-4cb6-9889-d900a42881a7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
